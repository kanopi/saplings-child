{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'paragraph--id--' ~ paragraph.id.value,
  ]
%}
{% set verticaltabs = 0 %}
{% if content.sa_display_as_vertical_tabs['#items'].value == 1 %}
  {% set verticaltabs = true %}
{% endif %}

{% set vtabs = '' %}
{% if verticaltabs %}
  {% set vtabs = ' vtabs' %}
{% endif %}

{% set container_class_string = 'container' %}
{% if paragraph.sa_container.value is not empty %}
  {% set container_class_string = ' ' ~ paragraph.sa_container.value %}
{% endif %}

{% set width_class_string = '' %}
{% if paragraph.sa_width.value is not empty %}
  {% set width_class_string = ' ' ~ paragraph.sa_width.value %}
{% endif %}

{% set margin_class_string = '' %}
{% if paragraph.sa_margin.value is not empty %}
  {% set margin_class_string = ' ' ~ paragraph.sa_margin.value %}
{% endif %}

{% set padding_class_string = '' %}
{% if paragraph.sa_padding.value is not empty %}
  {% set padding_class_string = ' ' ~ paragraph.sa_padding.value %}
{% endif %}

{% set bg_class_string = '' %}
{% if paragraph.sa_background.value is not empty %}
  {% set bg_class_string = ' ' ~ paragraph.sa_background.value %}
{% endif %}

{{ attach_library('saplings_child/tabs') }}

{% block paragraph %}
  <div{{attributes.addClass(classes)}}>
    <div class="{{ container_class_string }}{{ bg_class_string }}{{ margin_class_string }}{{ padding_class_string }}">
      {% if paragraph.sa_width.value is not empty %}
        <div class="row justify-content-center">
          <div class="{{ width_class_string }}">
          {% endif %}
          <div class="row">
            <div class="col">
              {{ content.sa_header}}
              {{ content.sa_description}}
            </div>
          </div>
          <div class="row">
            <div class="col">
              {% if content.sa_accordion_mobile['#items'].value == 1 %}
                <div class="d-lg-block d-none">
                {% endif %}
                <div class="{{ vtabs }}">
                  <div class="d-lg-none d-block">
                    <label for="nav-tabs-mobile-js" class="visually-hidden">{{ 'Choose a Tab from the dropdown to display'|t }}</label>
                    <select
                      id="nav-tabs-mobile-js" class="nav nav-tabs nav-tabs-mobile nav-tabs-mobile-js">
                      {# Loops through the tab sections to print the tab section titles. #}
                      {% for key, item in content.sa_tab_item|filter((value, key) => key|first != '#') %}
                        <option value="#{{ paragraph.id.value }}-{{ key + 1 }}" class="nav-link {% if loop.first %}active{% endif %}" href="#{{ paragraph.id.value }}-{{ key + 1 }}" aria-controls="{{ paragraph.id.value }}-{{ key + 1 }}" role="tab" data-bs-toggle="tab" {% if loop.first %} aria-selected="true" {% endif %} aria-controls="{{ paragraph.id.value }}-{{ key + 1 }}" role="tab" data-bs-toggle="tab">{{ item['#paragraph'].sa_header.value }}</option>
                        {# <option class="nav-link {% if loop.first %}active{% endif %}" id="{{ paragraph_id }}-{{ key + 1 }}" data-bs-toggle="tab" data-bs-target="#{{ paragraph_id }}-{{ key + 1 }}" type="option" role="tab">{{ item['#paragraph'].field_title.value }}</button> #}
                      {% endfor %}
                    </select>
                  </div>
                  {% block content %}
                    {{ content|without('sa_header', 'sa_description', 'sa_display_as_vertical_tabs', 'sa_accordion_mobile' )  }}
                  {% endblock %}
                </div>
                {% if content.sa_accordion_mobile['#items'].value == 1 %}
                </div>
              {% endif %}
              {% if content.sa_accordion_mobile['#items'].value == 1 %}
                <div class="accordion d-lg-none d-md-block">
                  {% for i in content.sa_tab_item['#items']|keys %}
                    {{ content.sa_tab_item[i]['#paragraph']|view('accordion') }}
                  {% endfor %}
                </div>
              {% endif %}
            </div>
          </div>
          {% if paragraph.sa_width.value is not empty %}
          </div>
        </div>
      {% endif %}
    </div>
  </div>
{% endblock paragraph %}
